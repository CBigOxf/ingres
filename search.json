[{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://cbigoxf.github.io/ingres/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"overview-of-ingres","dir":"Articles","previous_headings":"","what":"Overview of Ingres","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"Gene regulatory networks (GRN) long used way integrate heterogeneous data discrete model, useful generate actionable hypotheses mechanisms governing biological processes. present Ingres (Inferring Probabilistic Boolean Networks Gene Regulation Using Protein Activity Enrichment Scores) open-source tool uses single-cell sequencing data prior knowledge GRNs produce probabilistic Boolean network (PBN) per cell /cluster cells dataset. Ingres allows better capture differences cell phenotypes, using continuous measure protein activity still confined simplicity GRN. believe Ingres useful better understand heterogeneous makeup cell populations, gain insight specific circuits drive certain phenotypes, use expression omics infer computational cellular models bulk single-cell data. Specifically, use previously developed algorithm, VIPER,1 infer protein activity starting gene expression matrix list regulons —defined list transcriptional targets protein. computes matrix normalised enrichment scores (NES) protein. expression regulons represent optimal indirect method measure activity specific gene/protein (nodes preexisting Boolean network). constitutes novel way fit PBN using single-cell RNAseq data. details specific algorithms used, please refer publication describing Ingres2.","code":""},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"Victori, P. & Buffa, F. M. Ingres: single-cell RNA-seq data single-cell probabilistic Boolean networks. 2022.09.04.506528 Preprint https://doi.org/10.1101/2022.09.04.506528 (2022).","code":""},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"Ingres dependencies available CRAN. need installed Bioconductor:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"viper\") BiocManager::install(\"org.Hs.eg.db\") BiocManager::install(\"AnnotationDbi\") BiocManager::install(\"aracne.networks\") # optional dependency"},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"creating-the-ingres-object","dir":"Articles","previous_headings":"","what":"Creating the Ingres object","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"First load Ingres package: need create Ingres object hold necessary data. Ingres contains example data show use functions, print vignette structure can seen. two main ways creating Ingres object. easiest one using Seurat3 object scaling clustering pipelines already performed (see corresponding introductory vignette Seurat): also need network object tidygraph format: Ingres includes several helper functions can transform GinSim graphml files tidygraph format. data frame row per node network corresponding gene symbol, case nodes network different names: can use function createNetworkGenesTemplate generate network_genes file node names prepopulated. using RStudio interactively, function opens file us modify needed. , can create Ingres object: Ingres object can also created without Seurat object, providing expression matrix, cells rows genes columns, idents data.frame cell barcode corresponding cluster subpopulation:","code":"library(ingres) #> small_blca_wang #> An object of class Seurat  #> 16314 features across 90 samples within 1 assay  #> Active assay: RNA (16314 features, 2000 variable features) #>  1 dimensional reduction calculated: tsne network #> # A tbl_graph: 30 nodes and 110 edges #> # #> # A directed multigraph with 1 component #> # #> # Node Data: 30 × 3 (active) #>   kind  rule                              id               #>   <chr> <chr>                             <chr>            #> 1 input \"\"                                DNAdamage        #> 2 input \"\"                                GrowthInhibitors #> 3 fate  \"CyclinE1 or CyclinA\"             Proliferation    #> 4 fate  \"E2F1_2 or TP53\"                  Apoptosis        #> 5 fate  \"p21CIP or RB1 or RBL2\"           Growth_Arrest    #> 6 gene  \"SPRY and not FGFR3 and not GRB2\" EGFR             #> # … with 24 more rows #> # #> # Edge Data: 110 × 3 #>    from    to sign     #>   <int> <int> <chr>    #> 1     8    30 positive #> 2    14     3 positive #> 3    15     3 positive #> # … with 107 more rows # Load the graphml example file filename = system.file(\"extdata\", \"example_network.graphml\", package = \"ingres\")  #Convert to tidygraph format graphmlAsTidy(filename) #> # A tbl_graph: 30 nodes and 110 edges #> # #> # A directed multigraph with 1 component #> # #> # Node Data: 30 × 3 (active) #>   kind  rule                              id               #>   <chr> <chr>                             <chr>            #> 1 input \"\"                                DNAdamage        #> 2 input \"\"                                GrowthInhibitors #> 3 fate  \"CyclinE1 or CyclinA\"             Proliferation    #> 4 fate  \"E2F1_2 or TP53\"                  Apoptosis        #> 5 fate  \"p21CIP or RB1 or RBL2\"           Growth_Arrest    #> 6 gene  \"SPRY and not FGFR3 and not GRB2\" EGFR             #> # … with 24 more rows #> # #> # Edge Data: 110 × 3 #>    from    to sign     #>   <int> <int> <chr>    #> 1     8    30 positive #> 2    14     3 positive #> 3    15     3 positive #> # … with 107 more rows # Load the GinSim (.zginml) example file filename = system.file(\"extdata\", \"example_ginsim.zginml\", package = \"ingres\")  # Convert to graphml and store it in a temporary file temp = tempfile() gml = ginmlToGraphml(filename, dest = temp) head(gml) #> [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\">\" #> [2] \"<key attr.name=\\\"kind\\\" attr.type=\\\"string\\\" for=\\\"node\\\" id=\\\"kind\\\"/>\"                             #> [3] \"<key attr.name=\\\"rule\\\" attr.type=\\\"string\\\" for=\\\"node\\\" id=\\\"rule\\\"/>\"                             #> [4] \"<key attr.name=\\\"sign\\\" attr.type=\\\"string\\\" for=\\\"edge\\\" id=\\\"sign\\\"/>\"                             #> [5] \"<graph edgedefault=\\\"directed\\\">\"                                                                    #> [6] \"<node id=\\\"DNA_Damage\\\">\"  # Convert to tidygraph graphmlAsTidy(temp) #> # A tbl_graph: 26 nodes and 71 edges #> # #> # A directed simple graph with 1 component #> # #> # Node Data: 26 × 3 (active) #>   kind  rule                                             id         #>   <chr> <chr>                                            <chr>      #> 1 input \"\"                                               DNA_Damage #> 2 gene  \"DNA_Damage and (E2F1 or not Wip1 or not HDAC1)\" ATM        #> 3 gene  \"ATM and not Wip1\"                               p38MAPK    #> 4 gene  \"(not Wip1 or p53) and not ATM\"                  Mdm2       #> 5 gene  \"ATM or (not Mdm2 and p38MAPK)\"                  p53        #> 6 gene  \"p53_A\"                                          Wip1       #> # … with 20 more rows #> # #> # Edge Data: 71 × 3 #>    from    to sign     #>   <int> <int> <chr>    #> 1    18     8 negative #> 2    18     7 negative #> 3    18    17 negative #> # … with 68 more rows network_genes #>        node   symbol #> 1      EGFR     EGFR #> 2     FGFR3    FGFR4 #> 3       RAS     HRAS #> 4       RAS     KRAS #> 5       RAS     NRAS #> 6      E2F1     E2F1 #> 7  CyclinD1    CCND1 #> 8  CyclinE1    CCNE1 #> 9   CyclinA    CCNA1 #> 10  CyclinA    CCNA2 #> 11   CDC25A   CDC25A #> 12 p16INK4a p16INK4a #> 13      RB1      RB1 #> 14     RBL2     RBL2 #> 15   p21CIP   CDKN1A #> 16      ATM      ATM #> 17  CHEK1_2    CHEK1 #> 18  CHEK1_2    CHEK1 #> 19     MDM2     MDM2 #> 20     TP53     TP53 #> 21   p14ARF   CDKN2A #> 22     PTEN     PTEN #> 23     PI3K   PIK3CA #> 24      AKT     AKT1 #> 25      AKT     AKT2 #> 26      AKT     AKT3 #> 27     GRB2     GRB2 #> 28     SPRY    SPRY2 # store and modify = F just for demonstration. createNetworkGenesTemplate(network, store = F, modify = F) #> # A tibble: 25 × 2 #>    node     symbol   #>    <chr>    <chr>    #>  1 EGFR     EGFR     #>  2 FGFR3    FGFR3    #>  3 RAS      RAS      #>  4 E2F1_1   E2F1_1   #>  5 E2F1_2   E2F1_2   #>  6 E2F3_1   E2F3_1   #>  7 E2F3_2   E2F3_2   #>  8 CyclinD1 CyclinD1 #>  9 CyclinE1 CyclinE1 #> 10 CyclinA  CyclinA  #> # … with 15 more rows # Then, modify as needed. ing = createIngresObjectFromSeurat(   seurat.object = small_blca_wang,   seurat.assay  = \"RNA\",   slot          = \"data\",   network.genes = network_genes,   network       = network )  ing #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper not performed exp = ing@expression exp[1:2, 1:2] #>              sample1@AGCTTGAGTTCCTCCA-1 sample1@CAGCAGCCAGTCTTCC-1 #> RP11-34P13.7                          0                          0 #> AL627309.1                            0                          0  idents = ing@idents head(idents) #>                         cell cluster #> 1 sample1@AGCTTGAGTTCCTCCA-1       5 #> 2 sample1@CAGCAGCCAGTCTTCC-1       5 #> 3 sample1@CTAGCCTGTTAGTGGG-1       5 #> 4 sample1@GATGAGGGTCTGGTCG-1       5 #> 5 sample1@TGACTTTTCAAGAAGT-1       5 #> 6 sample1@TGCGTGGGTGTTGGGA-1       5 createIngresObject(   expression.matrix = exp,    idents            = idents,      network.genes     = network_genes,   network           = network) #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper not performed"},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"running-viper","dir":"Articles","previous_headings":"","what":"Running VIPER","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"next step run VIPER. information algorithm VIPER uses, please refer documentation. Ingres runs VIPER provided gene expression matrix, using regulon supplied user. regulon can come ARACNe algorithm4,5 databases Dorothea.6 several regulons provided, metaVIPER algorithm [14] run instead. algorithm designed integrate multiple interactomes, necessarily tissue-matched, VIPER needed work accurately. valuable single-cell RNA-seq data, due heterogeneity, inherent noisiness low sequencing depth.7 Indeed, metaVIPER shown reduce bias batch effect, generating reproducible protein-activity signatures [14]. Therefore, recommend method Ingres. Collections tumour regulons available Bioconductor.8 package aracne.networks, suggested dependency Ingres, contains ARACNe-inferred networks TCGA tumor datasets. VIPER produces matrix Normalised Enrichment Scores (NES) per gene cell.","code":"# Using a single regulon for speed ing = performViper(ing, aracne.networks::regulonblca) ing #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper performed"},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"computing-the-pbns","dir":"Articles","previous_headings":"","what":"Computing the PBNs","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"Now can generate PBNs every cell /every cluster Ingres object. generate PBN copy provided Boolean network second rule gene node fixed 1 0 (always active always inactive). probability rules chosen proportional NES computed VIPER. default, step re-scale NES (-1,1) gene cell. , gene highest NES given cell re-scaled 1 gene lowest NES cell re-scaled -1, every gene re-scaled relative range. , genes re-scaled NES>0 fixed 1 rule added corresponding network node, probability equals re-scaled NES. genes re-scaled NES<0 fixed 0 ruled added, probability equals [re-scaled NES]. original rule node probability equals 1-[fixed rule probability]. range (-1,1) can changed user, case less intense effect RNA-seq data desired. example, range inputed (-0.5, 0.5), gene highest expression 0.5 probability activating fixed rule, chance original rule. can also compute single PBN per cluster. case, median NES gene across cells cluster used produce PBN:","code":"ing = computePbnBySingleCell(ing) ing #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper performed  #> PBNs computed for each cell head(ing@single.cell.pbn) #>                         cell cluster         AKT        ATM      CHEK1_2 #> 1 sample1@AAGGAGCCAGCTTCGG-1       2  0.01817583 -0.7989694  0.099920471 #> 2 sample1@ACAGCTAAGATCCCGC-1       1 -0.07269741 -1.0000000  0.219362784 #> 3 sample1@ACGATGTAGTACATGA-1       3 -0.01603311 -0.9357372  0.513787703 #> 4 sample1@ACGGAGACAAATTGCC-1       2 -0.07899067 -0.7880775  0.055078000 #> 5 sample1@ACGGGCTCAAACCTAC-1       2 -0.04870924 -0.8023977 -0.002197616 #> 6 sample1@ACTGATGAGAGCTGGT-1       8  0.01102953 -0.6630933  0.153858311 #>     CyclinA    CyclinD1    CyclinE1        E2F1         EGFR       FGFR3 #> 1 1.0000000 0.005835620 -0.12590699  0.09456779 -0.002438333 -0.06437469 #> 2 0.2526539 0.100580602  0.03804537  0.14432723 -0.102653311 -0.08783756 #> 3 0.4896386 0.210391219 -0.04145495  1.00000000 -0.378800533  0.14514210 #> 4 1.0000000 0.060062911 -0.06046783 -0.06633384 -0.135412201 -0.03497538 #> 5 1.0000000 0.003268819  0.04396283  0.40529261  0.229916691 -0.24036193 #> 6 0.1336534 0.492846995 -0.26039627 -0.69295991 -0.509692556 -0.37852354 #>          GRB2         MDM2    p14ARF     p21CIP       PI3K        PTEN #> 1  0.31113702 -0.033343239 0.3929228 0.38233341 -0.4071378  0.29342925 #> 2  0.32854332 -0.094203638 0.3691654 0.42156174 -0.7358486  0.35724316 #> 3 -0.07954781  0.054171975 0.5303340 0.01893101 -0.5368198 -0.05223321 #> 4  0.14676515 -0.033723994 0.4598230 0.29802852 -0.5897442  0.20687463 #> 5  0.05351330  0.008933491 0.3479199 0.37278246 -0.4302515  0.27558028 #> 6  0.37222843 -0.326267067 0.1103229 0.37679082 -1.0000000  0.05096307 #>         RAS         RB1       RBL2       SPRY        TP53 #> 1 0.3769146 -0.02103803 -0.2541966 -0.2188479 -0.10594942 #> 2 0.6074293 -0.15998474 -0.2668762 -0.2855518  0.10555768 #> 3 0.5145371 -0.38879500 -0.4278514 -0.3070425  0.15455175 #> 4 0.5643470 -0.18693366 -0.2616696 -0.1796798 -0.09579184 #> 5 0.5007909 -0.38687170 -0.3977755 -0.2124557  0.17860741 #> 6 0.4309240  0.66462958  0.3797944 -0.2995955 -0.12893251  head(computePbnBySingleCell(ing, c(-0.5, 0.5))@single.cell.pbn) #>                         cell cluster          AKT        ATM      CHEK1_2 #> 1 sample1@AAGGAGCCAGCTTCGG-1       2  0.009087914 -0.3994847  0.049960235 #> 2 sample1@ACAGCTAAGATCCCGC-1       1 -0.036348706 -0.5000000  0.109681392 #> 3 sample1@ACGATGTAGTACATGA-1       3 -0.008016553 -0.4678686  0.256893851 #> 4 sample1@ACGGAGACAAATTGCC-1       2 -0.039495337 -0.3940388  0.027539000 #> 5 sample1@ACGGGCTCAAACCTAC-1       2 -0.024354619 -0.4011988 -0.001098808 #> 6 sample1@ACTGATGAGAGCTGGT-1       8  0.005514765 -0.3315466  0.076929156 #>     CyclinA    CyclinD1    CyclinE1        E2F1         EGFR       FGFR3 #> 1 0.5000000 0.002917810 -0.06295350  0.04728390 -0.001219166 -0.03218735 #> 2 0.1263270 0.050290301  0.01902269  0.07216362 -0.051326656 -0.04391878 #> 3 0.2448193 0.105195610 -0.02072748  0.50000000 -0.189400267  0.07257105 #> 4 0.5000000 0.030031455 -0.03023391 -0.03316692 -0.067706100 -0.01748769 #> 5 0.5000000 0.001634409  0.02198142  0.20264630  0.114958345 -0.12018097 #> 6 0.0668267 0.246423498 -0.13019813 -0.34647995 -0.254846278 -0.18926177 #>          GRB2         MDM2     p14ARF      p21CIP       PI3K        PTEN #> 1  0.15556851 -0.016671619 0.19646142 0.191166703 -0.2035689  0.14671463 #> 2  0.16427166 -0.047101819 0.18458272 0.210780872 -0.3679243  0.17862158 #> 3 -0.03977391  0.027085987 0.26516699 0.009465505 -0.2684099 -0.02611660 #> 4  0.07338257 -0.016861997 0.22991148 0.149014262 -0.2948721  0.10343732 #> 5  0.02675665  0.004466745 0.17395994 0.186391231 -0.2151258  0.13779014 #> 6  0.18611422 -0.163133533 0.05516143 0.188395408 -0.5000000  0.02548154 #>         RAS         RB1       RBL2        SPRY        TP53 #> 1 0.1884573 -0.01051901 -0.1270983 -0.10942395 -0.05297471 #> 2 0.3037147 -0.07999237 -0.1334381 -0.14277588  0.05277884 #> 3 0.2572686 -0.19439750 -0.2139257 -0.15352125  0.07727588 #> 4 0.2821735 -0.09346683 -0.1308348 -0.08983989 -0.04789592 #> 5 0.2503954 -0.19343585 -0.1988878 -0.10622785  0.08930371 #> 6 0.2154620  0.33231479  0.1898972 -0.14979777 -0.06446626 ing = computePbnByCluster(ing) ing #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper performed  #> PBNs computed for each cell #> PBNs computed for each cluster"},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"visualization-of-results","dir":"Articles","previous_headings":"","what":"Visualization of results","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"can export PBN analysis providing cell barcode cluster id: way, can plot network:   overview results can plotted heatmaps:   Finally, network can exported BoolNet9 network. package includes variety functions analyse networks:","code":"produceNetworkForCell(ing, \"sample1@ACAGCTAAGATCCCGC-1\")  produceNetworkForCluster(ing, \"1\") cellPbnPlot(ing, \"sample1@ACAGCTAAGATCCCGC-1\") clusterPbnPlot(ing, \"1\") cellGenesHeatmap(ing) clusterGenesHeatmap(ing) ing_network = produceNetworkForCluster(ing, \"1\")  boolnet_network = produceBoolnetNetwork(ing_network)  # Generate a initial state where all nodes have state 1 initial_state = rep(1, length(network))  # Compute one state transition from the given initial state. transition1 = BoolNet::stateTransition(   boolnet_network,    type  = \"probabilistic\",   state = initial_state)  head(transition1) #>        DNAdamage GrowthInhibitors    Proliferation        Apoptosis  #>                1                1                1                1  #>    Growth_Arrest             EGFR  #>                1                0"},{"path":"https://cbigoxf.github.io/ingres/articles/ingres.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Using Ingres to obtain single-cell probabilistic Boolean networks from single-cell RNA-seq data","text":"1. Alvarez, M. J. et al. Functional characterization somatic mutations cancer using network-based inference protein activity. Nature Genetics 48, 838–847 (2016). 2. Victori, P. & Buffa, F. M. Ingres: single-cell RNA-seq data single-cell probabilistic Boolean networks. 2022.09.04.506528 (2022) doi:10.1101/2022.09.04.506528. 3. Hao, Y. et al. Integrated analysis multimodal single-cell data. (2021) doi:10.1016/j.cell.2021.04.048. 4. Basso, K. et al. Reverse engineering regulatory networks human b cells. Nature Genetics 37, 382–390 (2005). 5. Lachmann, ., Giorgi, F. M., Lopez, G. & Califano, . ARACNe-ap: Gene network reverse engineering adaptive partitioning inference mutual information. Bioinformatics 32, 2233–2235 (2016). 6. Garcia-Alonso, L., Holland, C. H., Ibrahim, M. M., Turei, D. & Saez-Rodriguez, J. Benchmark integration resources estimation human transcription factor activities. Genome Research 29, 1363–1375 (2019). 7. Ding, H. et al. Quantitative assessment protein activity orphan tissues single cells using metaVIPER algorithm. Nature Communications 9, 1471 (2018). 8. Giorgi, F. M. Aracne.networks: ARACNe-inferred gene networks tcga tumor datasets. (Bioconductor, 2017). doi:10.18129/B9.BIOC.ARACNE.NETWORKS. 9. Müssel, C., Hopfensitz, M. & Kestler, H. . BoolNet – r package generation, reconstruction analysis boolean networks. Bioinformatics 26, 1378–1380 (2010).","code":""},{"path":"https://cbigoxf.github.io/ingres/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Victori. Author, maintainer. Francesca M. Buffa. Author.","code":""},{"path":"https://cbigoxf.github.io/ingres/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Victori, P. & Buffa, F. M. Ingres: single-cell RNA-seq data single-cell probabilistic Boolean networks. 2022.09.04.506528 Preprint https://doi.org/10.1101/2022.09.04.506528 (2022).","code":"@Misc{,   title = {Ingres: From Single-Cell {{RNA-seq}} Data to Single-Cell Probabilistic {{Boolean}} Networks},   author = {Pedro Victori and Francesca M. Buffa},   journal = {bioRxiv},   year = {2022},   pages = {2022.09.04.506528},   url = {https://www.biorxiv.org/content/10.1101/2022.09.04.506528v1},   doi = {10.1101/2022.09.04.506528}, }"},{"path":"https://cbigoxf.github.io/ingres/index.html","id":"ingres","dir":"","previous_headings":"","what":"Infer Gene Probabilistic Boolean Networks from Single-Cell Data","title":"Infer Gene Probabilistic Boolean Networks from Single-Cell Data","text":"Inferring Probabilistic Boolean Networks Gene Regulation Using Protein Activity Enrichment Scores Given gene regulatory boolean network RNA-seq dataset, ingres computes protein activity normalised enrichment scores using VIPER, produces probabilistic network using scores probabilities fixed node activation deactivation, addition original boolean functions.","code":""},{"path":"https://cbigoxf.github.io/ingres/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Infer Gene Probabilistic Boolean Networks from Single-Cell Data","text":"can install development version ingres : may need manually install BioConductor dependencies can install ingres:","code":"# install.packages(\"devtools\") devtools::install_github(\"CBigOxf/ingres\") # install.packages(\"BiocManager\") BiocManager::install(c(\"viper\", \"AnnotationDbi\", \"org.Hs.eg.db\", \"aracne.networks\"))"},{"path":"https://cbigoxf.github.io/ingres/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Infer Gene Probabilistic Boolean Networks from Single-Cell Data","text":"cite ingres publications use: Victori, P. & Buffa, F. M. Ingres: single-cell RNA-seq data single-cell probabilistic Boolean networks. 2022.09.04.506528 Preprint https://doi.org/10.1101/2022.09.04.506528 (2022).","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellGenesHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a cell heatmap — cellGenesHeatmap","title":"Plot a cell heatmap — cellGenesHeatmap","text":"Plots probabilities identity function produced computePbnBySingleCell heatmap, nodes x axis cells y axis, grouped cluster, returns ggplot object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellGenesHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a cell heatmap — cellGenesHeatmap","text":"","code":"cellGenesHeatmap(ingres.object)"},{"path":"https://cbigoxf.github.io/ingres/reference/cellGenesHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a cell heatmap — cellGenesHeatmap","text":"ingres.object ingres object non-null single.cell.pbn slot.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellGenesHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a cell heatmap — cellGenesHeatmap","text":"ggplot object containing cell PBN heatmap plot.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellGenesHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a cell heatmap — cellGenesHeatmap","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnBySingleCell(ing) cellGenesHeatmap(ing)"},{"path":"https://cbigoxf.github.io/ingres/reference/cellPbnPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a cell PBN — cellPbnPlot","title":"Plot a cell PBN — cellPbnPlot","text":"Plots PBN produced computePbnBySingleCell given cell returns ggplot object","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellPbnPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a cell PBN — cellPbnPlot","text":"","code":"cellPbnPlot(ingres.object, cell.id)"},{"path":"https://cbigoxf.github.io/ingres/reference/cellPbnPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a cell PBN — cellPbnPlot","text":"ingres.object ingres object non-null single.cell.pbn slot. cell.id string containing id cell plotted.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellPbnPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a cell PBN — cellPbnPlot","text":"ggplot object containing cell PBN plot.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/cellPbnPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a cell PBN — cellPbnPlot","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnBySingleCell(ing) cellPbnPlot(ing, \"sample1@ACAGCTAAGATCCCGC-1\")"},{"path":"https://cbigoxf.github.io/ingres/reference/clusterGenesHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a cluster heatmap — clusterGenesHeatmap","title":"Plot a cluster heatmap — clusterGenesHeatmap","text":"Plots probabilities identity function produced computePbnByCluster heatmap, nodes x axis clusters y axis, returns ggplot object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/clusterGenesHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a cluster heatmap — clusterGenesHeatmap","text":"","code":"clusterGenesHeatmap(ingres.object)"},{"path":"https://cbigoxf.github.io/ingres/reference/clusterGenesHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a cluster heatmap — clusterGenesHeatmap","text":"ingres.object ingres object non-null cluster.pbn slot.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/clusterGenesHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a cluster heatmap — clusterGenesHeatmap","text":"ggplot object containing cluster PBN heatmap plot.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/clusterGenesHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a cluster heatmap — clusterGenesHeatmap","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnByCluster(ing) clusterGenesHeatmap(ing)"},{"path":"https://cbigoxf.github.io/ingres/reference/clusterPbnPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a cluster PBN — clusterPbnPlot","title":"Plot a cluster PBN — clusterPbnPlot","text":"Plots PBN produced computePbnByCluster given cluster returns ggplot object","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/clusterPbnPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a cluster PBN — clusterPbnPlot","text":"","code":"clusterPbnPlot(ingres.object, cluster.id)"},{"path":"https://cbigoxf.github.io/ingres/reference/clusterPbnPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a cluster PBN — clusterPbnPlot","text":"ingres.object ingres object non-null cluster.pbn slot. cluster.id string containing id cluster plotted.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/clusterPbnPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a cluster PBN — clusterPbnPlot","text":"ggplot object containing cluster PBN plot.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/clusterPbnPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a cluster PBN — clusterPbnPlot","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnByCluster(ing) clusterPbnPlot(ing, \"1\")"},{"path":"https://cbigoxf.github.io/ingres/reference/computePbnByCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","title":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","text":"running performViper, can run produce PBN identity function probability node relative VIPER normalised enrichment score (NES) cell. computePbnByCluster, median NES cells cluster used.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/computePbnByCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","text":"","code":"computePbnByCluster(ingres.object, range = c(-1, 1))  computePbnBySingleCell(ingres.object, range = c(-1, 1))"},{"path":"https://cbigoxf.github.io/ingres/reference/computePbnByCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","text":"ingres.object ingres object non-null VIPER slot. range vector representing range NES re-scaled. range[1]+range[2] == 0 TRUE. Defaults [-1, 1]","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/computePbnByCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","text":"ingres object cluster.pbn single.cell.pbn slot filled","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/computePbnByCluster.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","text":"computePbnByCluster: Compute Probabilistic Boolean Network (PBN) cluster computePbnBySingleCell: Compute Probabilistic Boolean Network (PBN) cell","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/computePbnByCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a Probabilistic Boolean Network (PBN) for each cluster or each cell — computePbnByCluster","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnByCluster(ing) head(ing@cluster.pbn) #>   cluster  n          AKT        ATM    CHEK1_2     CyclinA    CyclinD1 #> 1       0 10 -0.097484176 -1.0000000  0.2166383  0.18131073  0.09277482 #> 2       1 10 -0.096326811 -1.0000000  0.2955960  0.35280697 -0.04390661 #> 3       2 10 -0.063815070 -0.8093695  0.2246400  1.00000000  0.00325166 #> 4       3 10 -0.063424756 -1.0000000  0.1330365  0.46560472  0.12554866 #> 5       4 10 -0.010348571 -0.9965950 -0.3066812 -0.18524741  0.30331777 #> 6       5 10  0.001876663 -0.5676380 -0.1472715 -0.01639584  0.28006367 #>      CyclinE1        E2F1        EGFR       FGFR3        GRB2         MDM2 #> 1  0.02914364 -0.18414952 -0.16332894 -0.16516364  0.26762876 -0.066543508 #> 2  0.04468990 -0.05342271 -0.16882291 -0.04755962  0.22798643 -0.084408374 #> 3  0.06342241  0.33638931 -0.13624438 -0.05261686  0.12801529  0.006134162 #> 4 -0.03427085  0.29593200 -0.41127203 -0.05913597 -0.01077991 -0.012822779 #> 5 -0.17783912 -0.69246793 -0.17103211 -0.07326116  0.15398728  0.089154534 #> 6 -0.01245400 -0.50915699 -0.07570176 -0.08304455  0.24640118 -0.028440399 #>         PI3K       PTEN       RAS        RB1        RBL2        SPRY #> 1 -0.7496748 0.27021727 0.4981292 -0.1713536 -0.26610083 -0.11779371 #> 2 -0.7516899 0.26323344 0.5051441 -0.2130711 -0.34314007 -0.21140959 #> 3 -0.4454655 0.15474012 0.4328864 -0.2776757 -0.25838560 -0.17278461 #> 4 -0.6591261 0.02716736 0.4134223 -0.2151321 -0.26859445 -0.25136186 #> 5 -0.9429948 0.46758917 0.4085684  0.1744684  0.01932629  0.01295213 #> 6 -1.0000000 0.27611854 0.4314033  0.2048461 -0.19299611  0.06166337 #>           TP53    p14ARF    p21CIP #> 1 -0.015769127 0.3315065 0.3546273 #> 2  0.005214565 0.3652086 0.2611126 #> 3 -0.059952999 0.4453124 0.1744224 #> 4 -0.011195217 0.3443604 0.4422260 #> 5 -0.026579701 0.1583249 1.0000000 #> 6 -0.016125642 0.2057767 0.7427967  ing = computePbnBySingleCell(ing) head(ing@single.cell.pbn) #>                         cell cluster         AKT        ATM      CHEK1_2 #> 1 sample1@AAGGAGCCAGCTTCGG-1       2  0.01817583 -0.7989694  0.099920471 #> 2 sample1@ACAGCTAAGATCCCGC-1       1 -0.07269741 -1.0000000  0.219362784 #> 3 sample1@ACGATGTAGTACATGA-1       3 -0.01603311 -0.9357372  0.513787703 #> 4 sample1@ACGGAGACAAATTGCC-1       2 -0.07899067 -0.7880775  0.055078000 #> 5 sample1@ACGGGCTCAAACCTAC-1       2 -0.04870924 -0.8023977 -0.002197616 #> 6 sample1@ACTGATGAGAGCTGGT-1       8  0.01102953 -0.6630933  0.153858311 #>     CyclinA    CyclinD1    CyclinE1        E2F1         EGFR       FGFR3 #> 1 1.0000000 0.005835620 -0.12590699  0.09456779 -0.002438333 -0.06437469 #> 2 0.2526539 0.100580602  0.03804537  0.14432723 -0.102653311 -0.08783756 #> 3 0.4896386 0.210391219 -0.04145495  1.00000000 -0.378800533  0.14514210 #> 4 1.0000000 0.060062911 -0.06046783 -0.06633384 -0.135412201 -0.03497538 #> 5 1.0000000 0.003268819  0.04396283  0.40529261  0.229916691 -0.24036193 #> 6 0.1336534 0.492846995 -0.26039627 -0.69295991 -0.509692556 -0.37852354 #>          GRB2         MDM2       PI3K        PTEN       RAS         RB1 #> 1  0.31113702 -0.033343239 -0.4071378  0.29342925 0.3769146 -0.02103803 #> 2  0.32854332 -0.094203638 -0.7358486  0.35724316 0.6074293 -0.15998474 #> 3 -0.07954781  0.054171975 -0.5368198 -0.05223321 0.5145371 -0.38879500 #> 4  0.14676515 -0.033723994 -0.5897442  0.20687463 0.5643470 -0.18693366 #> 5  0.05351330  0.008933491 -0.4302515  0.27558028 0.5007909 -0.38687170 #> 6  0.37222843 -0.326267067 -1.0000000  0.05096307 0.4309240  0.66462958 #>         RBL2       SPRY        TP53    p14ARF     p21CIP #> 1 -0.2541966 -0.2188479 -0.10594942 0.3929228 0.38233341 #> 2 -0.2668762 -0.2855518  0.10555768 0.3691654 0.42156174 #> 3 -0.4278514 -0.3070425  0.15455175 0.5303340 0.01893101 #> 4 -0.2616696 -0.1796798 -0.09579184 0.4598230 0.29802852 #> 5 -0.3977755 -0.2124557  0.17860741 0.3479199 0.37278246 #> 6  0.3797944 -0.2995955 -0.12893251 0.1103229 0.37679082  # Restrict range to (-0.5, 0.5) ing = computePbnByCluster(ing, range = c(-0.5, 0.5)) head(ing@cluster.pbn) #>   cluster  n           AKT        ATM     CHEK1_2      CyclinA    CyclinD1 #> 1       0 10 -0.0487420878 -0.5000000  0.10831915  0.090655366  0.04638741 #> 2       1 10 -0.0481634055 -0.5000000  0.14779800  0.176403485 -0.02195330 #> 3       2 10 -0.0319075352 -0.4046847  0.11232000  0.500000000  0.00162583 #> 4       3 10 -0.0317123779 -0.5000000  0.06651825  0.232802361  0.06277433 #> 5       4 10 -0.0051742855 -0.4982975 -0.15334060 -0.092623707  0.15165888 #> 6       5 10  0.0009383313 -0.2838190 -0.07363577 -0.008197919  0.14003183 #>       CyclinE1        E2F1        EGFR       FGFR3         GRB2         MDM2 #> 1  0.014571819 -0.09207476 -0.08166447 -0.08258182  0.133814378 -0.033271754 #> 2  0.022344949 -0.02671136 -0.08441145 -0.02377981  0.113993213 -0.042204187 #> 3  0.031711206  0.16819465 -0.06812219 -0.02630843  0.064007646  0.003067081 #> 4 -0.017135423  0.14796600 -0.20563601 -0.02956798 -0.005389957 -0.006411390 #> 5 -0.088919561 -0.34623396 -0.08551606 -0.03663058  0.076993638  0.044577267 #> 6 -0.006227001 -0.25457850 -0.03785088 -0.04152228  0.123200589 -0.014220200 #>         PI3K       PTEN       RAS         RB1         RBL2         SPRY #> 1 -0.3748374 0.13510864 0.2490646 -0.08567681 -0.133050414 -0.058896854 #> 2 -0.3758449 0.13161672 0.2525721 -0.10653556 -0.171570033 -0.105704793 #> 3 -0.2227327 0.07737006 0.2164432 -0.13883783 -0.129192799 -0.086392304 #> 4 -0.3295631 0.01358368 0.2067112 -0.10756603 -0.134297224 -0.125680931 #> 5 -0.4714974 0.23379459 0.2042842  0.08723422  0.009663146  0.006476063 #> 6 -0.5000000 0.13805927 0.2157017  0.10242307 -0.096498056  0.030831685 #>           TP53     p14ARF    p21CIP #> 1 -0.007884563 0.16575326 0.1773137 #> 2  0.002607283 0.18260432 0.1305563 #> 3 -0.029976500 0.22265622 0.0872112 #> 4 -0.005597609 0.17218018 0.2211130 #> 5 -0.013289851 0.07916246 0.5000000 #> 6 -0.008062821 0.10288837 0.3713984  ing = computePbnBySingleCell(ing, range = c(-0.5, 0.5)) head(ing@single.cell.pbn) #>                         cell cluster          AKT        ATM      CHEK1_2 #> 1 sample1@AAGGAGCCAGCTTCGG-1       2  0.009087914 -0.3994847  0.049960235 #> 2 sample1@ACAGCTAAGATCCCGC-1       1 -0.036348706 -0.5000000  0.109681392 #> 3 sample1@ACGATGTAGTACATGA-1       3 -0.008016553 -0.4678686  0.256893851 #> 4 sample1@ACGGAGACAAATTGCC-1       2 -0.039495337 -0.3940388  0.027539000 #> 5 sample1@ACGGGCTCAAACCTAC-1       2 -0.024354619 -0.4011988 -0.001098808 #> 6 sample1@ACTGATGAGAGCTGGT-1       8  0.005514765 -0.3315466  0.076929156 #>     CyclinA    CyclinD1    CyclinE1        E2F1         EGFR       FGFR3 #> 1 0.5000000 0.002917810 -0.06295350  0.04728390 -0.001219166 -0.03218735 #> 2 0.1263270 0.050290301  0.01902269  0.07216362 -0.051326656 -0.04391878 #> 3 0.2448193 0.105195610 -0.02072748  0.50000000 -0.189400267  0.07257105 #> 4 0.5000000 0.030031455 -0.03023391 -0.03316692 -0.067706100 -0.01748769 #> 5 0.5000000 0.001634409  0.02198142  0.20264630  0.114958345 -0.12018097 #> 6 0.0668267 0.246423498 -0.13019813 -0.34647995 -0.254846278 -0.18926177 #>          GRB2         MDM2       PI3K        PTEN       RAS         RB1 #> 1  0.15556851 -0.016671619 -0.2035689  0.14671463 0.1884573 -0.01051901 #> 2  0.16427166 -0.047101819 -0.3679243  0.17862158 0.3037147 -0.07999237 #> 3 -0.03977391  0.027085987 -0.2684099 -0.02611660 0.2572686 -0.19439750 #> 4  0.07338257 -0.016861997 -0.2948721  0.10343732 0.2821735 -0.09346683 #> 5  0.02675665  0.004466745 -0.2151258  0.13779014 0.2503954 -0.19343585 #> 6  0.18611422 -0.163133533 -0.5000000  0.02548154 0.2154620  0.33231479 #>         RBL2        SPRY        TP53     p14ARF      p21CIP #> 1 -0.1270983 -0.10942395 -0.05297471 0.19646142 0.191166703 #> 2 -0.1334381 -0.14277588  0.05277884 0.18458272 0.210780872 #> 3 -0.2139257 -0.15352125  0.07727588 0.26516699 0.009465505 #> 4 -0.1308348 -0.08983989 -0.04789592 0.22991148 0.149014262 #> 5 -0.1988878 -0.10622785  0.08930371 0.17395994 0.186391231 #> 6  0.1898972 -0.14979777 -0.06446626 0.05516143 0.188395408"},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ingres object. — createIngresObject","title":"Create a new ingres object. — createIngresObject","text":"Create new ingres object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new ingres object. — createIngresObject","text":"","code":"createIngresObject(expression.matrix, idents, network.genes, network)"},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new ingres object. — createIngresObject","text":"expression.matrix single-cell expression matrix, cells rows genes columns. idents data frame column cell barcode another column corresponding cluster subpopulation. network.genes data frame column node names another column corresponding entrez IDs. network object class tbl_graph representing network interest.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new ingres object. — createIngresObject","text":"ingres object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new ingres object. — createIngresObject","text":"","code":"# Get expression matrix from small_blca_wang for convenience, but it can be # any single-cell expression matrix, from any source. Same for idents. expression.matrix =   as.matrix(Seurat::GetAssayData(     small_blca_wang,     assay = \"RNA\", slot = \"data\"   ))  idents = data.frame(   cell = names(Seurat::Idents(small_blca_wang)),   cluster = as.character(Seurat::Idents(small_blca_wang)),   check.names = FALSE )  ing = createIngresObject(expression.matrix, idents, network_genes, network) ing #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper not performed"},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObjectFromSeurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ingres object using the expression data in a\nSeurat object. — createIngresObjectFromSeurat","title":"Create a new ingres object using the expression data in a\nSeurat object. — createIngresObjectFromSeurat","text":"Create new ingres object using expression data Seurat object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObjectFromSeurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new ingres object using the expression data in a\nSeurat object. — createIngresObjectFromSeurat","text":"","code":"createIngresObjectFromSeurat(   seurat.object,   seurat.assay = \"RNA\",   slot = \"data\",   network.genes,   network )"},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObjectFromSeurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new ingres object using the expression data in a\nSeurat object. — createIngresObjectFromSeurat","text":"seurat.object Seurat object QC, scaling clustering already executed. seurat.assay name assay imported, normally 'RNA' 'Spatial'. slot name slot contains matrix used. network.genes data frame column node names another column corresponding entrez IDs. network object class tbl_graph representing network interest.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObjectFromSeurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new ingres object using the expression data in a\nSeurat object. — createIngresObjectFromSeurat","text":"ingres object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createIngresObjectFromSeurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new ingres object using the expression data in a\nSeurat object. — createIngresObjectFromSeurat","text":"","code":"createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper not performed"},{"path":"https://cbigoxf.github.io/ingres/reference/createNetworkGenesTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a network genes data frame. Optionally store it as csv\nand open it for editing\nTo create an ingres object, a data frame with the network nodes and\nthe corresponding gene symbols must be provided. This function simplifies\nthe process. If the gene nodes are correct gene symbols, then modification\nis not needed and the returned data frame can be directly passed to\nthe ingres constructors. — createNetworkGenesTemplate","title":"Create a network genes data frame. Optionally store it as csv\nand open it for editing\nTo create an ingres object, a data frame with the network nodes and\nthe corresponding gene symbols must be provided. This function simplifies\nthe process. If the gene nodes are correct gene symbols, then modification\nis not needed and the returned data frame can be directly passed to\nthe ingres constructors. — createNetworkGenesTemplate","text":"Create network genes data frame. Optionally store csv open editing create ingres object, data frame network nodes corresponding gene symbols must provided. function simplifies process. gene nodes correct gene symbols, modification needed returned data frame can directly passed ingres constructors.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createNetworkGenesTemplate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a network genes data frame. Optionally store it as csv\nand open it for editing\nTo create an ingres object, a data frame with the network nodes and\nthe corresponding gene symbols must be provided. This function simplifies\nthe process. If the gene nodes are correct gene symbols, then modification\nis not needed and the returned data frame can be directly passed to\nthe ingres constructors. — createNetworkGenesTemplate","text":"","code":"createNetworkGenesTemplate(network, dir = getwd(), store = TRUE, modify = TRUE)"},{"path":"https://cbigoxf.github.io/ingres/reference/createNetworkGenesTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a network genes data frame. Optionally store it as csv\nand open it for editing\nTo create an ingres object, a data frame with the network nodes and\nthe corresponding gene symbols must be provided. This function simplifies\nthe process. If the gene nodes are correct gene symbols, then modification\nis not needed and the returned data frame can be directly passed to\nthe ingres constructors. — createNetworkGenesTemplate","text":"network tidygraph network. dir directory csv stored, applicable. store true, store data frame csv modify true, store also true, open modified user","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createNetworkGenesTemplate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a network genes data frame. Optionally store it as csv\nand open it for editing\nTo create an ingres object, a data frame with the network nodes and\nthe corresponding gene symbols must be provided. This function simplifies\nthe process. If the gene nodes are correct gene symbols, then modification\nis not needed and the returned data frame can be directly passed to\nthe ingres constructors. — createNetworkGenesTemplate","text":"template data frame.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/createNetworkGenesTemplate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a network genes data frame. Optionally store it as csv\nand open it for editing\nTo create an ingres object, a data frame with the network nodes and\nthe corresponding gene symbols must be provided. This function simplifies\nthe process. If the gene nodes are correct gene symbols, then modification\nis not needed and the returned data frame can be directly passed to\nthe ingres constructors. — createNetworkGenesTemplate","text":"","code":"tmp = tempdir() createNetworkGenesTemplate(network, dir = tmp) #> • Edit '/tmp/RtmpmuF6FF/networkGenes.csv' #> # A tibble: 25 × 2 #>    node     symbol   #>    <chr>    <chr>    #>  1 EGFR     EGFR     #>  2 FGFR3    FGFR3    #>  3 RAS      RAS      #>  4 E2F1_1   E2F1_1   #>  5 E2F1_2   E2F1_2   #>  6 E2F3_1   E2F3_1   #>  7 E2F3_2   E2F3_2   #>  8 CyclinD1 CyclinD1 #>  9 CyclinE1 CyclinE1 #> 10 CyclinA  CyclinA  #> # … with 15 more rows file.remove(paste(tmp, \"/networkGenes.csv\")) # cleanup #> Warning: cannot remove file '/tmp/RtmpmuF6FF /networkGenes.csv', reason 'No such file or directory' #> [1] FALSE"},{"path":"https://cbigoxf.github.io/ingres/reference/ginmlToGraphml.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a GinSim file into a GraphML file\nGinSim files have the extension .zginml. This utility function converts such\nfiles into the GraphML format. keeping the kind - fate, input or gene -, the\nedge sign and the rule - formulae - data. — ginmlToGraphml","title":"Convert a GinSim file into a GraphML file\nGinSim files have the extension .zginml. This utility function converts such\nfiles into the GraphML format. keeping the kind - fate, input or gene -, the\nedge sign and the rule - formulae - data. — ginmlToGraphml","text":"Convert GinSim file GraphML file GinSim files extension .zginml. utility function converts files GraphML format. keeping kind - fate, input gene -, edge sign rule - formulae - data.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/ginmlToGraphml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a GinSim file into a GraphML file\nGinSim files have the extension .zginml. This utility function converts such\nfiles into the GraphML format. keeping the kind - fate, input or gene -, the\nedge sign and the rule - formulae - data. — ginmlToGraphml","text":"","code":"ginmlToGraphml(ginzipFile, fates = c(), dest = NULL)"},{"path":"https://cbigoxf.github.io/ingres/reference/ginmlToGraphml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a GinSim file into a GraphML file\nGinSim files have the extension .zginml. This utility function converts such\nfiles into the GraphML format. keeping the kind - fate, input or gene -, the\nedge sign and the rule - formulae - data. — ginmlToGraphml","text":"ginzipFile path .zginml file. GraphML file created directory. fates vector fate names. left empty, fate gene nodes labelled kind='gene' dest path graphml file created. NULL, defaults path zginml file, graphml extension.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/ginmlToGraphml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a GinSim file into a GraphML file\nGinSim files have the extension .zginml. This utility function converts such\nfiles into the GraphML format. keeping the kind - fate, input or gene -, the\nedge sign and the rule - formulae - data. — ginmlToGraphml","text":"vector lines newly created GraphML file.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/ginmlToGraphml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a GinSim file into a GraphML file\nGinSim files have the extension .zginml. This utility function converts such\nfiles into the GraphML format. keeping the kind - fate, input or gene -, the\nedge sign and the rule - formulae - data. — ginmlToGraphml","text":"","code":"filename =   system.file(\"extdata\", \"example_ginsim.zginml\", package = \"ingres\") head(ginmlToGraphml(filename)) #> [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><graphml xmlns=\\\"http://graphml.graphdrawing.org/xmlns\\\">\" #> [2] \"<key attr.name=\\\"kind\\\" attr.type=\\\"string\\\" for=\\\"node\\\" id=\\\"kind\\\"/>\"                             #> [3] \"<key attr.name=\\\"rule\\\" attr.type=\\\"string\\\" for=\\\"node\\\" id=\\\"rule\\\"/>\"                             #> [4] \"<key attr.name=\\\"sign\\\" attr.type=\\\"string\\\" for=\\\"edge\\\" id=\\\"sign\\\"/>\"                             #> [5] \"<graph edgedefault=\\\"directed\\\">\"                                                                    #> [6] \"<node id=\\\"DNA_Damage\\\">\""},{"path":"https://cbigoxf.github.io/ingres/reference/graphmlAsTidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GraphML format to tidygraph — graphmlAsTidy","title":"Convert GraphML format to tidygraph — graphmlAsTidy","text":"order used ingres, GraphML files converted tidygraph format. helper .","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/graphmlAsTidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GraphML format to tidygraph — graphmlAsTidy","text":"","code":"graphmlAsTidy(filename)"},{"path":"https://cbigoxf.github.io/ingres/reference/graphmlAsTidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GraphML format to tidygraph — graphmlAsTidy","text":"filename path GraphML file.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/graphmlAsTidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GraphML format to tidygraph — graphmlAsTidy","text":"tidygraph object","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/graphmlAsTidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GraphML format to tidygraph — graphmlAsTidy","text":"","code":"filename =   system.file(\"extdata\", \"example_network.graphml\", package = \"ingres\") graphmlAsTidy(filename) #> # A tbl_graph: 30 nodes and 110 edges #> # #> # A directed multigraph with 1 component #> # #> # Node Data: 30 × 3 (active) #>   kind  rule                              id               #>   <chr> <chr>                             <chr>            #> 1 input \"\"                                DNAdamage        #> 2 input \"\"                                GrowthInhibitors #> 3 fate  \"CyclinE1 or CyclinA\"             Proliferation    #> 4 fate  \"E2F1_2 or TP53\"                  Apoptosis        #> 5 fate  \"p21CIP or RB1 or RBL2\"           Growth_Arrest    #> 6 gene  \"SPRY and not FGFR3 and not GRB2\" EGFR             #> # … with 24 more rows #> # #> # Edge Data: 110 × 3 #>    from    to sign     #>   <int> <int> <chr>    #> 1     8    30 positive #> 2    14     3 positive #> 3    15     3 positive #> # … with 107 more rows"},{"path":"https://cbigoxf.github.io/ingres/reference/ingres-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The ingres class. — ingres-class","title":"The ingres class. — ingres-class","text":"ingres class.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/ingres-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ingres class. — ingres-class","text":"ingres object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/ingres-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ingres class. — ingres-class","text":"expression matrix. idents data.frame. network.genes data.frame. viper data.frame. cluster.pbn data.frame. single.cell.pbn data.frame. network tbl_graph.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/ingres-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ingres: Infer Gene Probabilistic Boolean Networks from Single-Cell Data — ingres-package","title":"ingres: Infer Gene Probabilistic Boolean Networks from Single-Cell Data — ingres-package","text":"Given gene regulatory boolean network RNA-seq dataset, package computes protein activity normalised enrichment scores using 'VIPER', produces probabilistic network using scores probabilities fixed node activation deactivation, addition original Boolean functions. information, refer preprint: Victori Buffa (2022) <doi:10.1101/2022.09.04.506528>.","code":""},{"path":[]},{"path":"https://cbigoxf.github.io/ingres/reference/ingres-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ingres: Infer Gene Probabilistic Boolean Networks from Single-Cell Data — ingres-package","text":"Maintainer: Pedro Victori pedroluisvictori@gmail.com (ORCID) Authors: Francesca M. Buffa francesca.buffa@unibocconi.(ORCID)","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/network.html","id":null,"dir":"Reference","previous_headings":"","what":"An example network,\nin the format required by the package.\nThe network is a modified version of the one in\nRemy et al. Cancer Res 75, 4042–4052 (2015) — network","title":"An example network,\nin the format required by the package.\nThe network is a modified version of the one in\nRemy et al. Cancer Res 75, 4042–4052 (2015) — network","text":"example network, format required package. network modified version one Remy et al. Cancer Res 75, 4042–4052 (2015)","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example network,\nin the format required by the package.\nThe network is a modified version of the one in\nRemy et al. Cancer Res 75, 4042–4052 (2015) — network","text":"","code":"network"},{"path":"https://cbigoxf.github.io/ingres/reference/network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example network,\nin the format required by the package.\nThe network is a modified version of the one in\nRemy et al. Cancer Res 75, 4042–4052 (2015) — network","text":"object class tbl_graph (inherits igraph) length 30.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/network_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"An example dataframe with the genes contained in the network,\nin the format required by the package — network_genes","title":"An example dataframe with the genes contained in the network,\nin the format required by the package — network_genes","text":"example dataframe genes contained network, format required package","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/network_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example dataframe with the genes contained in the network,\nin the format required by the package — network_genes","text":"","code":"network_genes"},{"path":"https://cbigoxf.github.io/ingres/reference/network_genes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example dataframe with the genes contained in the network,\nin the format required by the package — network_genes","text":"object class data.frame 28 rows 2 columns.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/performViper.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform VIPER — performViper","title":"Perform VIPER — performViper","text":"Performs VIPER analysis RNA-seq dataset contained ingres object. function merely wrapper around original VIPER function, designed suit ingres workflow properly prepare input data.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/performViper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform VIPER — performViper","text":"","code":"performViper(ingres.object, regulon, verbose = FALSE)"},{"path":"https://cbigoxf.github.io/ingres/reference/performViper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform VIPER — performViper","text":"ingres.object ingres object. regulon Object class regulon list objects class regulon metaVIPER analysis verbose Logical, whether progression messages printed terminal","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/performViper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform VIPER — performViper","text":"ingres object result VIPER inference viper slot","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/performViper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform VIPER — performViper","text":"","code":"# Subset regulon to speed up example run regulon = aracne.networks::regulonblca[1:100] ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) performViper(ing, regulon) #> An ingres object #> -------------------- #> 16314 features across 90 samples #> 9 clusters #> Its Boolean network has 30 nodes #> Viper performed"},{"path":"https://cbigoxf.github.io/ingres/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://cbigoxf.github.io/ingres/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/plotSelectedCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the PBN of a cell selected in an interactive plot. — plotSelectedCell","title":"Plot the PBN of a cell selected in an interactive plot. — plotSelectedCell","text":"Launches Shiny app interactive tSNE plot Seurat object. cell clicked, PBN cell plotted side side tSNE plot. Internally, uses cellPbnPlot selected cell.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/plotSelectedCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the PBN of a cell selected in an interactive plot. — plotSelectedCell","text":"","code":"plotSelectedCell(ingres.object, seurat.object)"},{"path":"https://cbigoxf.github.io/ingres/reference/plotSelectedCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the PBN of a cell selected in an interactive plot. — plotSelectedCell","text":"ingres.object ingres object non-null single.cell.pbn slot. seurat.object Seurat object created dataset ingres object. Ideally, object used create ingres object createIngresObjectFromSeurat.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/plotSelectedCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the PBN of a cell selected in an interactive plot. — plotSelectedCell","text":"return value, called launch Shiny app.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/plotSelectedCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the PBN of a cell selected in an interactive plot. — plotSelectedCell","text":"","code":"if (FALSE) { # interactive() ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results ing = computePbnBySingleCell(ing) plotSelectedCell(ing, small_blca_wang) }"},{"path":"https://cbigoxf.github.io/ingres/reference/printAllNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Print all nodes in a network\nFor testing and checks purposes. — printAllNodes","title":"Print all nodes in a network\nFor testing and checks purposes. — printAllNodes","text":"Print nodes network testing checks purposes.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/printAllNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print all nodes in a network\nFor testing and checks purposes. — printAllNodes","text":"","code":"printAllNodes(network)"},{"path":"https://cbigoxf.github.io/ingres/reference/printAllNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print all nodes in a network\nFor testing and checks purposes. — printAllNodes","text":"network network nodes printed.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/printAllNodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print all nodes in a network\nFor testing and checks purposes. — printAllNodes","text":"return value, called print output.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/printAllNodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print all nodes in a network\nFor testing and checks purposes. — printAllNodes","text":"","code":"printAllNodes(network) #> # A tibble: 30 × 3 #>    kind  rule                                                              id    #>    <chr> <chr>                                                             <chr> #>  1 input \"\"                                                                DNAd… #>  2 input \"\"                                                                Grow… #>  3 fate  \"CyclinE1 or CyclinA\"                                             Prol… #>  4 fate  \"E2F1_2 or TP53\"                                                  Apop… #>  5 fate  \"p21CIP or RB1 or RBL2\"                                           Grow… #>  6 gene  \"SPRY and not FGFR3 and not GRB2\"                                 EGFR  #>  7 gene  \"not EGFR and not GRB2\"                                           FGFR3 #>  8 gene  \"EGFR or FGFR3 or GRB2\"                                           RAS   #>  9 gene  \"not RB1 and not RBL2 and ((not (CHEK1_2_2 and ATM_2) and (RAS o… E2F1… #> 10 gene  \"not RBL2 and not RB1 and ATM_2 and CHEK1_2_2 and (RAS or E2F3_2… E2F1… #> 11 gene  \"not RB1 and not CHEK1_2_2 and RAS\"                               E2F3… #> 12 gene  \"not RB1 and CHEK1_2_2 and RAS\"                                   E2F3… #> 13 gene  \"(RAS or AKT) and not p16INK4a and not p21CIP\"                    Cycl… #> 14 gene  \"not RBL2 and not p21CIP and CDC25A and ((E2F1_1 or E2F1_2) or (… Cycl… #> 15 gene  \"not RBL2 and not p21CIP and CDC25A and ((E2F1_1 or E2F1_2) or (… Cycl… #> 16 gene  \"not (CHEK1_2_1 or CHEK1_2_2) and not RBL2 and ((E2F1_1 or E2F1_… CDC2… #> 17 gene  \"GrowthInhibitors and not RB1\"                                    p16I… #> 18 gene  \"not CyclinD1 and not CyclinE1 and not p16INK4a and not CyclinA\"  RB1   #> 19 gene  \"not CyclinD1 and not CyclinE1\"                                   RBL2  #> 20 gene  \"not CyclinE1 and (GrowthInhibitors or TP53) and not AKT\"         p21C… #> 21 gene  \"DNAdamage and not (E2F1_1 or E2F1_2)\"                            ATM_1 #> 22 gene  \"(E2F1_1 or E2F1_2) and DNAdamage\"                                ATM_2 #> 23 gene  \"(ATM_1 or ATM_2) and not (E2F1_1 or E2F1_2)\"                     CHEK… #> 24 gene  \"(E2F1_1 or E2F1_2) and (ATM_1 or ATM_2)\"                         CHEK… #> 25 gene  \"(TP53 or AKT) and not (E2F1_1 or E2F1_2) and not (ATM_1 or ATM_… MDM2  #> 26 gene  \"not MDM2 and (((ATM_1 or ATM_2) and (CHEK1_2_1 or CHEK1_2_2)) o… TP53  #> 27 gene  \"GRB2 and RAS and not TP53\"                                       PI3K  #> 28 gene  \"PI3K\"                                                            AKT   #> 29 gene  \"(FGFR3 and not GRB2 and not SPRY) or EGFR\"                       GRB2  #> 30 gene  \"RAS\"                                                             SPRY"},{"path":"https://cbigoxf.github.io/ingres/reference/produceBoolnetNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an ingres network into a BoolNet one — produceBoolnetNetwork","title":"Convert an ingres network into a BoolNet one — produceBoolnetNetwork","text":"Convert ingres network BoolNet one","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceBoolnetNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an ingres network into a BoolNet one — produceBoolnetNetwork","text":"","code":"produceBoolnetNetwork(network)"},{"path":"https://cbigoxf.github.io/ingres/reference/produceBoolnetNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an ingres network into a BoolNet one — produceBoolnetNetwork","text":"network network converted, created produceNetworkForCluster() produceNetworkForCell()","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceBoolnetNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an ingres network into a BoolNet one — produceBoolnetNetwork","text":"BoolNet object.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceBoolnetNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an ingres network into a BoolNet one — produceBoolnetNetwork","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  # Compute PBNs by cluster ing = computePbnByCluster(ing)  # Produce a network for an arbitrary cluster network = produceNetworkForCluster(ing, \"1\")  produceBoolnetNetwork(network) #> Probabilistic Boolean network with 30 genes #>  #> Involved genes: #> DNAdamage GrowthInhibitors Proliferation Apoptosis Growth_Arrest EGFR FGFR3 RAS E2F1_1 E2F1_2 E2F3_1 E2F3_2 CyclinD1 CyclinE1 CyclinA CDC25A p16INK4a RB1 RBL2 p21CIP ATM_1 ATM_2 CHEK1_2_1 CHEK1_2_2 MDM2 TP53 PI3K AKT GRB2 SPRY #>  #> Transition functions: #>  #> Alternative transition functions for gene DNAdamage: #> DNAdamage = DNAdamage ( probability: 1) #>  #> Alternative transition functions for gene GrowthInhibitors: #> GrowthInhibitors = GrowthInhibitors ( probability: 1) #>  #> Alternative transition functions for gene Proliferation: #> Proliferation = CyclinE1 | CyclinA ( probability: 1) #>  #> Alternative transition functions for gene Apoptosis: #> Apoptosis = E2F1_2 | TP53 ( probability: 1) #>  #> Alternative transition functions for gene Growth_Arrest: #> Growth_Arrest = p21CIP | RB1 | RBL2 ( probability: 1) #>  #> Alternative transition functions for gene EGFR: #> EGFR = SPRY & ! FGFR3 & ! GRB2 ( probability: 0.8311771) #> EGFR = 0 ( probability: 0.1688229) #>  #> Alternative transition functions for gene FGFR3: #> FGFR3 = ! EGFR & ! GRB2 ( probability: 0.9524404) #> FGFR3 = 0 ( probability: 0.04755962) #>  #> Alternative transition functions for gene RAS: #> RAS = EGFR | FGFR3 | GRB2 ( probability: 0.4948559) #> RAS = 1 ( probability: 0.5051441) #>  #> Alternative transition functions for gene E2F1_1: #> E2F1_1 = ! RB1 & ! RBL2 & ((! (CHEK1_2_2 & ATM_2) & (RAS | (E2F3_1 | E2F3_2))) | (CHEK1_2_2 & ATM_2 & ! RAS & E2F3_2)) ( probability: 1) #>  #> Alternative transition functions for gene E2F1_2: #> E2F1_2 = ! RBL2 & ! RB1 & ATM_2 & CHEK1_2_2 & (RAS | E2F3_2) ( probability: 1) #>  #> Alternative transition functions for gene E2F3_1: #> E2F3_1 = ! RB1 & ! CHEK1_2_2 & RAS ( probability: 1) #>  #> Alternative transition functions for gene E2F3_2: #> E2F3_2 = ! RB1 & CHEK1_2_2 & RAS ( probability: 1) #>  #> Alternative transition functions for gene CyclinD1: #> CyclinD1 = (RAS | AKT) & ! p16INK4a & ! p21CIP ( probability: 0.9560934) #> CyclinD1 = 0 ( probability: 0.04390661) #>  #> Alternative transition functions for gene CyclinE1: #> CyclinE1 = ! RBL2 & ! p21CIP & CDC25A & ((E2F1_1 | E2F1_2) | (E2F3_1 | E2F3_2)) ( probability: 0.9553101) #> CyclinE1 = 1 ( probability: 0.0446899) #>  #> Alternative transition functions for gene CyclinA: #> CyclinA = ! RBL2 & ! p21CIP & CDC25A & ((E2F1_1 | E2F1_2) | (E2F3_1 | E2F3_2)) ( probability: 0.647193) #> CyclinA = 1 ( probability: 0.352807) #>  #> Alternative transition functions for gene CDC25A: #> CDC25A = ! (CHEK1_2_1 | CHEK1_2_2) & ! RBL2 & ((E2F1_1 | E2F1_2) | (E2F3_1 | E2F3_2)) ( probability: 1) #>  #> Alternative transition functions for gene p16INK4a: #> p16INK4a = GrowthInhibitors & ! RB1 ( probability: 1) #>  #> Alternative transition functions for gene RB1: #> RB1 = ! CyclinD1 & ! CyclinE1 & ! p16INK4a & ! CyclinA ( probability: 0.7869289) #> RB1 = 0 ( probability: 0.2130711) #>  #> Alternative transition functions for gene RBL2: #> RBL2 = ! CyclinD1 & ! CyclinE1 ( probability: 0.6568599) #> RBL2 = 0 ( probability: 0.3431401) #>  #> Alternative transition functions for gene p21CIP: #> p21CIP = ! CyclinE1 & (GrowthInhibitors | TP53) & ! AKT ( probability: 0.7388874) #> p21CIP = 1 ( probability: 0.2611126) #>  #> Alternative transition functions for gene ATM_1: #> ATM_1 = DNAdamage & ! (E2F1_1 | E2F1_2) ( probability: 1) #>  #> Alternative transition functions for gene ATM_2: #> ATM_2 = (E2F1_1 | E2F1_2) & DNAdamage ( probability: 1) #>  #> Alternative transition functions for gene CHEK1_2_1: #> CHEK1_2_1 = (ATM_1 | ATM_2) & ! (E2F1_1 | E2F1_2) ( probability: 1) #>  #> Alternative transition functions for gene CHEK1_2_2: #> CHEK1_2_2 = (E2F1_1 | E2F1_2) & (ATM_1 | ATM_2) ( probability: 1) #>  #> Alternative transition functions for gene MDM2: #> MDM2 = (TP53 | AKT) & ! (E2F1_1 | E2F1_2) & ! (ATM_1 | ATM_2) & ! RB1 ( probability: 0.9155916) #> MDM2 = 0 ( probability: 0.08440837) #>  #> Alternative transition functions for gene TP53: #> TP53 = ! MDM2 & (((ATM_1 | ATM_2) & (CHEK1_2_1 | CHEK1_2_2)) | E2F1_2) ( probability: 0.9947854) #> TP53 = 1 ( probability: 0.005214565) #>  #> Alternative transition functions for gene PI3K: #> PI3K = GRB2 & RAS & ! TP53 ( probability: 0.2483101) #> PI3K = 0 ( probability: 0.7516899) #>  #> Alternative transition functions for gene AKT: #> AKT = PI3K ( probability: 0.9036732) #> AKT = 0 ( probability: 0.09632681) #>  #> Alternative transition functions for gene GRB2: #> GRB2 = (FGFR3 & ! GRB2 & ! SPRY) | EGFR ( probability: 0.7720136) #> GRB2 = 1 ( probability: 0.2279864) #>  #> Alternative transition functions for gene SPRY: #> SPRY = RAS ( probability: 0.7885904) #> SPRY = 0 ( probability: 0.2114096)"},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a tidygraph network for a given cell — produceNetworkForCell","title":"Produce a tidygraph network for a given cell — produceNetworkForCell","text":"Produce tidygraph network given cell","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a tidygraph network for a given cell — produceNetworkForCell","text":"","code":"produceNetworkForCell(ingres.object, cell.id)"},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a tidygraph network for a given cell — produceNetworkForCell","text":"ingres.object ingres object containing relevant data. cell.id id cell network produced.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a tidygraph network for a given cell — produceNetworkForCell","text":"tidygraph object containing network given cell.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a tidygraph network for a given cell — produceNetworkForCell","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnBySingleCell(ing)  network = produceNetworkForCell(ing, \"sample1@ACAGCTAAGATCCCGC-1\") print(network) #> # A tbl_graph: 30 nodes and 110 edges #> # #> # A directed multigraph with 1 component #> # #> # Node Data: 30 × 7 (active) #>   kind  rule                              id           p fixed_p fixed_… functi… #>   <chr> <chr>                             <chr>    <dbl>   <dbl>   <dbl>   <dbl> #> 1 input \"\"                                DNAdam… NA      NA          NA  NA     #> 2 input \"\"                                Growth… NA      NA          NA  NA     #> 3 fate  \"CyclinE1 or CyclinA\"             Prolif… NA      NA          NA  NA     #> 4 fate  \"E2F1_2 or TP53\"                  Apopto… NA      NA          NA  NA     #> 5 fate  \"p21CIP or RB1 or RBL2\"           Growth… NA      NA          NA  NA     #> 6 gene  \"SPRY and not FGFR3 and not GRB2\" EGFR    -0.103   0.103       0   0.897 #> # … with 24 more rows #> # #> # Edge Data: 110 × 3 #>    from    to sign     #>   <int> <int> <chr>    #> 1     8    30 positive #> 2    14     3 positive #> 3    15     3 positive #> # … with 107 more rows"},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a tidygraph network for a given cluster — produceNetworkForCluster","title":"Produce a tidygraph network for a given cluster — produceNetworkForCluster","text":"Produce tidygraph network given cluster","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a tidygraph network for a given cluster — produceNetworkForCluster","text":"","code":"produceNetworkForCluster(ingres.object, cluster.id)"},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a tidygraph network for a given cluster — produceNetworkForCluster","text":"ingres.object ingres object containing relevant data. cluster.id id cluster network produced.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a tidygraph network for a given cluster — produceNetworkForCluster","text":"tidygraph object containing network given cluster.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/produceNetworkForCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a tidygraph network for a given cluster — produceNetworkForCluster","text":"","code":"# Create an ingres object with viper slot ing = createIngresObjectFromSeurat(   small_blca_wang, \"RNA\", \"data\", network_genes, network ) ing@viper = viper_results  ing = computePbnByCluster(ing)  network = produceNetworkForCluster(ing, \"1\") print(network) #> # A tbl_graph: 30 nodes and 110 edges #> # #> # A directed multigraph with 1 component #> # #> # Node Data: 30 × 7 (active) #>   kind  rule                              id           p fixed_p fixed_… functi… #>   <chr> <chr>                             <chr>    <dbl>   <dbl>   <dbl>   <dbl> #> 1 input \"\"                                DNAdam… NA      NA          NA  NA     #> 2 input \"\"                                Growth… NA      NA          NA  NA     #> 3 fate  \"CyclinE1 or CyclinA\"             Prolif… NA      NA          NA  NA     #> 4 fate  \"E2F1_2 or TP53\"                  Apopto… NA      NA          NA  NA     #> 5 fate  \"p21CIP or RB1 or RBL2\"           Growth… NA      NA          NA  NA     #> 6 gene  \"SPRY and not FGFR3 and not GRB2\" EGFR    -0.169   0.169       0   0.831 #> # … with 24 more rows #> # #> # Edge Data: 110 × 3 #>    from    to sign     #>   <int> <int> <chr>    #> 1     8    30 positive #> 2    14     3 positive #> 3    15     3 positive #> # … with 107 more rows"},{"path":"https://cbigoxf.github.io/ingres/reference/small_blca_wang.html","id":null,"dir":"Reference","previous_headings":"","what":"An example small Seurat object, using dataset GSE130001 from\nWang et al. Genome Med. 2020 Dec;12(1):24. — small_blca_wang","title":"An example small Seurat object, using dataset GSE130001 from\nWang et al. Genome Med. 2020 Dec;12(1):24. — small_blca_wang","text":"example small Seurat object, using dataset GSE130001 Wang et al. Genome Med. 2020 Dec;12(1):24.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/small_blca_wang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example small Seurat object, using dataset GSE130001 from\nWang et al. Genome Med. 2020 Dec;12(1):24. — small_blca_wang","text":"","code":"small_blca_wang"},{"path":"https://cbigoxf.github.io/ingres/reference/small_blca_wang.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example small Seurat object, using dataset GSE130001 from\nWang et al. Genome Med. 2020 Dec;12(1):24. — small_blca_wang","text":"object class Seurat 16314 rows 90 columns.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/viper_results.html","id":null,"dir":"Reference","previous_headings":"","what":"The results of running performViper() on an ingres object created with\nsmall_blca_wang, intended to speed up vignettes and examples.\nThis data frame was subset to only contain the genes in the network_genes\nfile, so to keep the file size small. — viper_results","title":"The results of running performViper() on an ingres object created with\nsmall_blca_wang, intended to speed up vignettes and examples.\nThis data frame was subset to only contain the genes in the network_genes\nfile, so to keep the file size small. — viper_results","text":"results running performViper() ingres object created small_blca_wang, intended speed vignettes examples. data frame subset contain genes network_genes file, keep file size small.","code":""},{"path":"https://cbigoxf.github.io/ingres/reference/viper_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The results of running performViper() on an ingres object created with\nsmall_blca_wang, intended to speed up vignettes and examples.\nThis data frame was subset to only contain the genes in the network_genes\nfile, so to keep the file size small. — viper_results","text":"","code":"viper_results"},{"path":"https://cbigoxf.github.io/ingres/reference/viper_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The results of running performViper() on an ingres object created with\nsmall_blca_wang, intended to speed up vignettes and examples.\nThis data frame was subset to only contain the genes in the network_genes\nfile, so to keep the file size small. — viper_results","text":"object class data.frame 90 rows 25 columns.","code":""},{"path":"https://cbigoxf.github.io/ingres/news/index.html","id":"ingres-100","dir":"Changelog","previous_headings":"","what":"ingres 1.0.0","title":"ingres 1.0.0","text":"First complete release. Please check preprint package vignette information features.","code":""}]
